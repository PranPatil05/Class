package utils;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;

import java.util.Calendar;
import java.util.concurrent.TimeUnit;


public abstract class TestBase {
    public WebDriver driver;
    private static Logger logger;
    public static StringBuilder classLogs;
    BrowserSetup browserSetup;
    WebDriverWait wait;

    @BeforeTest(alwaysRun = true)
    public  void setLogger(){
        System.out.println("***************Setting Logger *****************");
        logger= LogManager.getLogger(TestBase.class);
        TestBase.log("*************** Logger Set ***************");
    }

    public static void log(String log) {
        if(classLogs==null) classLogs = new StringBuilder();
        logger.info(log);
        Calendar current = Calendar.getInstance();
        log = current.getTime() + " ## " + log;
        classLogs.append(log).append(System.lineSeparator());

        /*lineSeparator()-Returns the system-dependent line separator string. It always returns the same value -
        the initial value of the system property line.separator.
        On UNIX systems, it returns "\n"; on Microsoft Windows systems it returns "\r\n"*/
    }

    @BeforeTest(alwaysRun = true)
    public void invokeBrowser(){
        TestBase.log("*************** Invoking Browser ***************");
        browserSetup = new BrowserSetup();
        driver = browserSetup.invokeWebDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().pageLoadTimeout(60, TimeUnit.SECONDS);
        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
        wait = new WebDriverWait(driver,15);
        TestBase.log("*************** Invoking Finished ***************");
    }
    @BeforeTest(alwaysRun=true, dependsOnMethods = "invokeBrowser")
    public void baseNvigation(){
        System.out.println("Navigating to Base URL");
        driver.get("https://www.saucedemo.com/");
        System.out.println("Navigating to Base URL ends");
    }

    @AfterTest(alwaysRun=true)
    public void closeBrowser(){
        System.out.println("Closing Browser");
        driver.quit();
        System.out.println("Closing Browser ends");
    }

}

/*Steps(Log setUp)
1.  Add Log4j dependency
2.  in resource create log4j.properties file-console Appender-Log4j2 ConsoleAppender appends the log events generated by application into the System.
    Console appender uses the log message pattern specified by the user in configuration using PatternLayout property
3.  public static StringBuilder classLogs; -using compostion StringBuilder class extended-classLogs is reference.
    import org.apache.log4j.LogManager;
4.  private static Logger logger;- -using compostion Logger class in log4j extended- logger reference.
    import org.apache.log4j.Logger;
5.  create log method-
    private static void log(String log) {
        if(classLogs==null) classLogs = new StringBuilder();
        logger.info(log);//messege return info method
        Calendar current = Calendar.getInstance();
        log = current.getTime() + " ## " + log;
        classLogs.append(log).append(System.lineSeparator());
        }
6.  SetLogger before every test
        @BeforeTest(alwaysRun = true)
    public  void setLogger(){
        System.out.println("***************Setting Logger *****************");
        logger= LogManager.getLogger(TestBase.class);
        TestBase.log("*************** Logger Set ***************");//Using Test base reference call log method
    }

    (Log setUp completed)

7.  Now we move to setup a BrowserSetup.

 */

